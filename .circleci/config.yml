defaults: &default_docker
  docker:
    - image: circleci/node:13.8.0

version: 2.1

commands:
   # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

  add_ssh_to_job: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:   ["4a:e1:27:2d:e3:17:ed:eb:33:6f:92:b0:19:91:fe:73"]
  build_frontend:
    # docker:
    #   - image: circleci/node:13.8.0
    <<: *default_docker
    steps:
      - checkout
      - run: npm i
      - save_cache:
          key: 'npm-package'
          paths:
           - /src/node_modules

  lint_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
           - 'npm-package'
      - run: npm i
      - run: npm run lint

  audit_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit

  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
  ansible_configure_server: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:   ["4a:e1:27:2d:e3:17:ed:eb:33:6f:92:b0:19:91:fe:73"]
      - run: apk add --update ansible 
      - run: apk add --update ansible openssh
      - run: ansible-playbook -i inventory main.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      # - run: apk add --update curl
      - run:
          name: smoke test / simulate error
          command: exit 1
          # command: |
          #   URL="http://googlr.com/"
          #   # Test if website exists
          #   if curl -s --head ${URL} 
          #   then
          #     return 0
          #   else
          #     return 1
          #   fi
      - destroy_environment

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
        # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - run: aws s3 cp index.html s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7}/index.html

# Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt
      - run: ls -la
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            cat ~/textfile.txt
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  welcome:
    jobs:
      - add_ssh_to_job
      # - build_frontend
      # - lint_frontend:
      #     requires:
      #       - build_frontend
      # - audit_frontend:
      #     requires:
      #       - lint_frontend
      # - create_infrastructure: 
      #     requires:
      #       - lint_frontend
      # - ansible_configure_server: 
      #     requires: 
      #       - create_infrastructure
      # # - ansible_configure_server
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
      # - create_and_deploy_front_end
      # - get_last_deployment_id:
      #     requires: 
      #       - create_and_deploy_front_end
      # - promote_to_production: 
      #     requires: 
      #       - create_and_deploy_front_end
      # - clean_up_old_front_end:
      #     requires: 
      #       - get_last_deployment_id
      #       - promote_to_production